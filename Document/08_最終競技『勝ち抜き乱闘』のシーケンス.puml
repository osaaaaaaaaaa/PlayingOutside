@startuml
'https://plantuml.com/sequence-diagram

'[メモ]'
'クライアントAが勝ったが、まだAが勝った通知が来ておらず、クライアントAが死んだ場合'
'制限時間を終了条件にしたほうがシンプル？'

participant クライアントA
participant クライアントB
participant クライアントC
participant サーバー

autonumber
title 最終競技『勝ち抜き乱闘』のシーケンス図

rnote over クライアントA,クライアントC:現在のシーン：GameScene2
rnote over クライアントA,サーバー:現在の競技：[最終競技]『勝ち抜き乱闘』

クライアントA -> サーバー:負けた通知
rnote over サーバー:クライアントAの順位を保存
rnote over サーバー:クライアントA以外で生存しているユーザーをチェック
alt まだ生存しているユーザーが複数いる場合
クライアントB <-- サーバー:クライアントAが負けたことを通知
クライアントC <-- サーバー:クライアントAが負けたことを通知
rnote over クライアントB,クライアントC:クライアントAのキャラクター削除
end
alt 生存しているユーザー(B)が一人だけの場合
クライアントA <-- サーバー:クライアントBが勝ったことを通知
クライアントB <-- サーバー:クライアントBが勝ったことを通知
クライアントC <-- サーバー:クライアントBが勝ったことを通知
rnote over サーバー:リザルト(途中経過)情報をまとめる
クライアントA <- サーバー:競技終了通知+リザルト(途中経過)情報を送信
クライアントB <- サーバー:競技終了通知+リザルト(途中経過)情報を送信
クライアントC <- サーバー:競技終了通知+リザルト(途中経過)情報を送信
rnote over クライアントA,クライアントC:現在のシーン：FinalResultsScene
rnote over クライアントA,クライアントC:最終結果発表
end
alt クライアントA以外で生存しているユーザーがいない場合(他のユーザーとほぼ同時に負けることを想定)
クライアントA <-- サーバー:クライアントAが勝ったことを通知
クライアントB <-- サーバー:クライアントAが勝ったことを通知
クライアントC <-- サーバー:クライアントAが勝ったことを通知
rnote over サーバー:リザルト(途中経過)情報をまとめる
クライアントA <- サーバー:競技終了通知+リザルト(途中経過)情報を送信
クライアントB <- サーバー:競技終了通知+リザルト(途中経過)情報を送信
クライアントC <- サーバー:競技終了通知+リザルト(途中経過)情報を送信
rnote over クライアントA,クライアントC:現在のシーン：FinalResultsScene
rnote over クライアントA,クライアントC:最終結果発表
end

@enduml クライアントA